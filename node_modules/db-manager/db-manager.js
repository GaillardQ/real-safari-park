var pg = require('pg');
var util = require('util');

var host = "";
var port = "5432";
var database = "real_safari_park";
var user = "quentin";
var pwd = "1209AzPoQsMlWxNb";

var client = null;
var callback = null;
var debug = false;
exports.client = client;

var db_connect = function(_host) {
    try
    {
        host = _host;
        var conString = "postgres://" + user + ":" + pwd + "@" + host + ":" + port + "/" + database;
        client = new pg.Client(conString);
    
        client.connect(function(err) {
            if (err) {
                console.log("Connection to " + host + " : NOT OK");
                console.log("Error : " + err);
    
                return;
            }
    	
    	console.log("Connection to " + host + " : OK");
        });
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_connect (code 101)\n" + err.message);
    }
};
exports.db_connect = db_connect;

var db_userAuth = function(fb_id, _callback) {
    try
    {
        if (client != null) {
            callback = _callback;
    
            function callback_getUser(data) {
                // S'il n'existe pas, on l'enregistre
                var user;
                if (data.length === 0) {
                    user = {
                        fb_id: fb_id,
                        registered_at: 'NOW()',
                        logged: true,
                        last_logged_at: 'NOW()',
                    };
    
                    function callback_insertUser(res) {
    		    if(debug == true)
    		    {
            		console.log("Ajout d'utilisateur : " + res.rowCount);
    		    }
                        if (callback != null) {
                            var todo = callback;
                            callback = null;
                            todo();
                        }
                    }
                    db_insertUser(user, callback_insertUser);
                }
                // Sinon, on met à jour ses infos
                {
                    user = {
                        logged: true,
                        last_logged_at: 'NOW()',
                    };
    
                    function callback_updateUser(res) {
                        if(debug == true)
    		    {
    			console.log("Update d'utilisateur : " + res.rowCount);
    		    }
                        if (callback != null) {
                            var todo = callback;
                            callback = null;
                            todo();
                        }
                    }
                    db_updateUser(fb_id, user, callback_updateUser);
                }
            }
            // On commence par chercher s'il existe dans la bdd
            db_getUserFomFbId(fb_id, callback_getUser);
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_userAuth (code 102)\n" + err.message);
    }
}
exports.db_userAuth = db_userAuth;

var db_checkUserIsLogged = function(fb_id, _callback) {
    try
    {
        if (client != null) {
            callback = _callback;
    
            function callback_getUser(data) {
                console.log(util.inspect(data, true, null));
                if(data.length > 0 && data[0].logged == true) {
                    if (callback != null) {
                        var todo = callback;
                        callback = null;
                        todo(true);
                    }
                }
                // Sinon, on met à jour ses infos
                {
                    if (callback != null) {
                        var todo = callback;
                        callback = null;
                        todo(false);
                    }
                }
            }
            // On commence par chercher s'il existe dans la bdd
            db_getUserFomFbId(fb_id, callback_getUser);
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_checkUserIsLogged (code 103)\n" + err.message);
    }
};
exports.db_checkUserIsLogged = db_checkUserIsLogged;

var db_getUserFomFbId = function(fb_id, _callback) {
    try
    {
        if (client != null) {
            client.query("SELECT * FROM \"user\" WHERE fb_id = '" + fb_id + "'", function(err, result) {
                if (err) {
                    return console.error('DB Manager (error)(db_checkUserIsLogged) : ', err);
                }
                _callback(result.rows);
            });
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_getUserFomFbId (code 104)\n" + err.message);
    }
}
exports.db_getUserFomFbId = db_getUserFomFbId;

var db_insertUser = function(user, _callback) {
    try
    {
        if (client != null) {
            var fields = "";
            var values = "";
            for (var c in user) {
                fields += c + ",";
                values += user[c] + ",";
            }
            fields = fields.slice(0, - 1);
            values = values.slice(0, - 1);
    
            var query = "INSERT INTO \"user\" (" + fields + ") VALUES (" + values + ");";
    	
    	if(debug == true)
    	{
                console.log("Query (db_insertUser) : " + query);
    	}
            client.query(query, function(err, result) {
                if (err) {
                    return console.error('DB Manager (error)(db_insertUser) : ', err);
                }
                _callback(result);
            });
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_insertUser (code 105)\n" + err.message);
    }
}
exports.db_insertUser = db_insertUser;

var db_updateUser = function(fb_id, user, _callback) {
    try
    {
        if (client != null) {
            var values = "";
            for (var c in user) {
                values += c + "=" + user[c] + ",";
            }
            values = values.slice(0, - 1);
    
            var query = "UPDATE \"user\" SET " + values + " WHERE fb_id='" + fb_id + "';";
            if(debug == true)
    	{
            	console.log("Query (db_updateUser) : " + query);
    	}
            client.query(query, function(err, result) {
                if (err) {
                    return console.error('DB Manager (error)(db_updateUser) : ', err);
                }
                _callback(result);
            });
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_updateUser (code 106)\n" + err.message);
    }
}
exports.db_updateUser = db_updateUser;

var db_checkPokemonInArea = function(fb_id, coords, zone_length, nb_pokemon_zone, _callback)
{
    try
    {
        if(client != null)
        {
            callback = _callback;
            
            var query = "SELECT pokemon.id as id, pokemon.name as name, pokemon.number as number, pokemon.gif as gif, pokemon.png as png, pokemon_category.name as category, pokemon_popped.popped_place as place, pokemon_popped.expired_at as expires_at "+
                        "FROM pokemon_popped, pokemon, pokemon_category "+
                        "WHERE pokemon_popped.id_pokemon = pokemon.id "+
                        "AND pokemon.id_category = pokemon_category.id "+
                        "AND ST_distance_sphere(ST_SetSRID(pokemon_popped.popped_place::geometry,4326),ST_GeomFromEWKT('SRID=4326;POINT("+coords.lat+" "+coords.long+")')) < "+zone_length+
                        " AND pokemon_popped.catched=false "+
                        "LIMIT "+nb_pokemon_zone;
            if(debug === true)
    	{
                console.log("Query (db_checkPokemonInArea) : "+query);
    	}
            
            client.query(query, function(err, result) {
                if (err) {
                    return console.error('DB Manager (error)(db_checkPokemonInArea) : ', err);
                }
                if (callback != null) {
                    var todo = callback;
                    callback = null;
                    todo(result);
                }
            });
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_checkPokemonInArea (code 107)\n" + err.message);
    }
}
exports.db_checkPokemonInArea = db_checkPokemonInArea;

var db_savePoppedPokemons = function(area_pokemon, _callback)
{
    try
    {
        if(client != null)
        {
            callback = _callback;
            if(debug == true)
    	{
            	console.log("area_pokemon : "+util.inspect(area_pokemon));
    	}
            
            var query = "INSERT INTO pokemon_popped(id_pokemon, popped_place, expired_at, catched) VALUES ";
            
            for(var i=0; i<area_pokemon.length; i++)
            {
                var p = area_pokemon[i];
                // POINT("+p.coords.k+", "+p.coords.B+")
                // ST_SetSRID(ST_MakePoint("+p.coords.k+", "+p.coords.B+"),4326)
                query += "("+p.id+", POINT("+p.coords.k+", "+p.coords.B+"), NULL, false),";
            }
            query = query.slice(0, - 1);
    	
            if(debug == true)
    	{
                console.log("Query (db_savePoppedPokemons) : "+query);
    	}
            client.query(query, function(err, result) {
                if (err) {
                    return console.error('DB Manager (error)(db_savePoppedPokemons) : ', err);
                }
                if (callback != null) {
                    var todo = callback;
                    callback = null;
                    todo(result);
                }
            });
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_savePoppedPokemons (code 108)\n" + err.message);
    }
};
exports.db_savePoppedPokemons = db_savePoppedPokemons;

var db_createNewPokemons = function(pokemons, _callback)
{
    try
    {
        if(client != null)
        {
            callback = _callback;
            var obj_rarity = {};
            var query_rarity = "";
            
            var rarity;
            // On stock le nombre de pokemon de chaque type dont nous avons besoin
            for(var p in pokemons)
            {
                rarity = pokemons[p].rarity;
                
                if(obj_rarity[rarity] == null) {
                    obj_rarity[rarity] = 1;
                    query_rarity += "'"+rarity+"',";
                } else {
                    obj_rarity[rarity] = obj_rarity[rarity] + 1;
                }
            }
            query_rarity = query_rarity.slice(0, - 1);
            
            var query = "SELECT p.id, p.name, p.number, p.png, p.gif, pc.name as rarity FROM pokemon as p, pokemon_category as pc WHERE p.id_category = pc.id AND pc.name IN ("+query_rarity+") ORDER BY pc.name ASC, p.name ASC";
    
    	if(debug === true)
    	{
                console.log("Query (db_createNewPokemons) : "+query);
    	}
    
            client.query(query, function(err, result) {
                if (err) {
                    return console.error('DB Manager (error)(db_createNewPokemons) : ', err);
                }
                
                var p, r, ex_r = "", obj_pokemons = {};
                // On réparti tous les pokemons dans des tableaux selon leur type
                for(var l in result.rows)
                {
                    p = result.rows[l];
                    if(p.rarity != ex_r)
                    {
                        r = p.rarity
                        obj_pokemons[r] = [];
                    }
                    obj_pokemons[r].push(p);
                    ex_r = r;
                }
                
                var tab, nb, random, size, ar_pokemon = [], tmp;
                var keys = Object.keys( obj_pokemons );
                keys.forEach(function (k, i) {
                    // Pour chaque type, on récupère le tableau des pokemons
                    // On récupère le nombre de pokemons à générer pour ce type
                    // On tire au sort chaque pokemon à générer
                    tab = obj_pokemons[k];
                    nb = obj_rarity[k];
                    for(var i=0; i<nb; i++)
                    {
                        for(var p in pokemons)
                        {
                            tmp = pokemons[p].rarity;
                            if(tmp == k && pokemons[p].name == null)
                            {
                                size = tab.length;
                                random = Math.floor(Math.random()*tab.length);
                                pokemons[p].id = tab[random].id;
                                pokemons[p].name = tab[random].name;
                                pokemons[p].number = tab[random].number;
                                pokemons[p].png = tab[random].png;
                                pokemons[p].gif = tab[random].gif;
                                ar_pokemon.push(pokemons[p]);
                            }
                        }
                    }
                });
                if (callback != null) {
                    var todo = callback;
                    callback = null;
                    todo(ar_pokemon);
                }
            });
            
        }
    }
    catch(err)
    {
        console.log("db-manager.js > Error during the function db_createNewPokemons (code 109)\n" + err.message);
    }
};
exports.db_createNewPokemons = db_createNewPokemons;
