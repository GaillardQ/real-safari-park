var pg = require('pg');
var util = require('util');

var host = "real-safari-park.cwazuxifehxl.us-west-2.rds.amazonaws.com";
var port = "5432";
var database = "real_safari_park";
var user = "quentin";
var pwd = "1209AzPoQsMlWxNb";

var client = null;
var callback = null;
exports.client = client;

var db_connect = function() {
    var conString = "postgres://" + user + ":" + pwd + "@" + host + ":" + port + "/" + database;
    client = new pg.Client(conString);

    client.connect(function(err) {
        if (err) {
            console.log("Connection to " + host + " : NOT OK");
            console.log("Error : " + err);

            return;
        }

        console.log("Connection to " + host + " : OK");
    });
}
exports.db_connect = db_connect;

var db_userAuth = function(fb_id, _callback) {
    if (client != null) {
        callback = _callback;

        function callback_getUser(data) {
            // S'il n'existe pas, on l'enregistre
            var user;
            if (data.length == 0) {
                user = {
                    fb_id: fb_id,
                    registered_at: 'NOW()',
                    logged: true,
                    last_logged_at: 'NOW()',
                };

                function callback_insertUser(res) {
                    var util = require('util');
                    console.log("Ajout d'utilisateur : " + res.rowCount);
                    if (callback != null) {
                        var todo = callback;
                        callback = null;
                        todo();
                    }
                }
                db_insertUser(user, callback_insertUser);
            }
            // Sinon, on met à jour ses infos
            {
                user = {
                    logged: true,
                    last_logged_at: 'NOW()',
                };

                function callback_updateUser(res) {
                    var util = require('util');
                    console.log("Update d'utilisateur : " + res.rowCount);
                    if (callback != null) {
                        var todo = callback;
                        callback = null;
                        todo();
                    }
                }
                db_updateUser(fb_id, user, callback_updateUser);
            }
        }
        // On commence par chercher s'il existe dans la bdd
        db_getUserFomFbId(fb_id, callback_getUser);
    }
}
exports.db_userAuth = db_userAuth;

var db_checkUserIsLogged = function(fb_id, _callback) {
    if (client != null) {
        callback = _callback;

        function callback_getUser(data) {
            var util = require("util");
            console.log(util.inspect(data, true, null));
            if(data.length > 0 && data[0].logged == true) {
                if (callback != null) {
                    var todo = callback;
                    callback = null;
                    todo(true);
                }
            }
            // Sinon, on met à jour ses infos
            {
                if (callback != null) {
                    var todo = callback;
                    callback = null;
                    todo(false);
                }
            }
        }
        // On commence par chercher s'il existe dans la bdd
        db_getUserFomFbId(fb_id, callback_getUser);
    }
};
exports.db_checkUserIsLogged = db_checkUserIsLogged;

var db_getUserFomFbId = function(fb_id, _callback) {
    if (client != null) {
        client.query("SELECT * FROM \"user\" WHERE fb_id = '" + fb_id + "'", function(err, result) {
            if (err) {
                return console.error('DB Manager (error)(db_checkUserIsLogged) : ', err);
            }
            _callback(result.rows);
        });
    }
}
exports.db_getUserFomFbId = db_getUserFomFbId;

var db_insertUser = function(user, _callback) {
    if (client != null) {
        var fields = "";
        var values = "";
        for (var c in user) {
            fields += c + ",";
            values += user[c] + ",";
        }
        fields = fields.slice(0, - 1);
        values = values.slice(0, - 1);

        var query = "INSERT INTO \"user\" (" + fields + ") VALUES (" + values + ");";
        console.log("Query (db_insertUser) : " + query);
        client.query(query, function(err, result) {
            if (err) {
                return console.error('DB Manager (error)(db_insertUser) : ', err);
            }
            _callback(result);
        });
    }
}
exports.db_insertUser = db_insertUser;

var db_updateUser = function(fb_id, user, _callback) {
    if (client != null) {
        var values = "";
        for (var c in user) {
            values += c + "=" + user[c] + ",";
        }
        values = values.slice(0, - 1);

        var query = "UPDATE \"user\" SET " + values + " WHERE fb_id='" + fb_id + "';";
        console.log("Query (db_updateUser) : " + query);
        client.query(query, function(err, result) {
            if (err) {
                return console.error('DB Manager (error)(db_updateUser) : ', err);
            }
            _callback(result);
        });
    }
}
exports.db_updateUser = db_updateUser;

var db_checkPokemonInArea = function(fb_id, coords, zone_length, nb_pokemon_zone, _callback)
{
    if(client != null)
    {
        callback = _callback;
        
        var query = "SELECT * FROM pokemon_popped WHERE ST_distance(popped_place::geometry,ST_GeomFromEWKT('SRID=4326;POINT("+coords.lat+" "+coords.long+")')) < "+zone_length+" LIMIT "+nb_pokemon_zone;
        console.log("Query (db_checkPokemonInArea) : "+query);
        client.query(query, function(err, result) {
            if (err) {
                return console.error('DB Manager (error)(db_checkPokemonInArea) : ', err);
            }
            if (callback != null) {
                var todo = callback;
                callback = null;
                todo(result);
            }
        });
    }
}
exports.db_checkPokemonInArea = db_checkPokemonInArea;

var db_savePoppedPokemons = function(area_pokemon, _callback)
{
    if(client != null)
    {
        callback = _callback;
        var util = require('util');
        console.log("area_pokemon : "+util.inspect(area_pokemon));
        var query = "INSERT INTO pokemon_popped(id_pokemon, popped_place, 0, false) VALUES";
        for(var p in area_pokemon)
        {
            //console.log("p : "+p);
        }
        console.log("Query (db_savePoppedPokemons) : "+query);
        /*client.query(query, function(err, result) {
            if (err) {
                return console.error('DB Manager (error)(db_savePoppedPokemons) : ', err);
            }
            if (callback != null) {
                var todo = callback;
                callback = null;
                todo(result);
            }
        });*/
    }
}
exports.db_savePoppedPokemons = db_savePoppedPokemons;

var db_createNewPokemons = function(pokemons, _callback)
{
    if(client != null)
    {
        callback = _callback;
        var pokemon;
        var completed = 0;
        var nb_pokemons = pokemons.length
        var area_pokemons = [];
        for(var p in pokemons)
        {
            pokemon = pokemons[p];
            var callback_get = function(_p, _pokemons)
            {
                var nb = _pokemons.length;
                var index = Math.floor(Math.random()*nb);
                _p.name = _pokemons[index].name;
                _p.number = _pokemons[index].number;
                _p.png = _pokemons[index].png;
                _p.gif = _pokemons[index].gif;
                area_pokemons[area_pokemons.length] = _p;
                completed++;
                
                // Si tous les pokemons ont été créés
                if(completed == nb_pokemons)
                {
                    if (callback != null) {
                        var todo = callback;
                        callback = null;
                        todo(area_pokemons);
                    }
                }
            }
            
            var query = "SELECT p.name, p.number, p.png, p.gif FROM pokemon as p, pokemon_category as pc WHERE p.id_category = pc.id AND pc.name LIKE '"+pokemon.rarity+"'";
            client.query(query, function(err, result) {
                if (err) {
                    return console.error('DB Manager (error)(db_createNewPokemons) : ', err);
                }
                callback_get(pokemon, result.rows);
            })
        }
        
    }
}
exports.db_createNewPokemons = db_createNewPokemons;