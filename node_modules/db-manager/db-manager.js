var pg = require('pg');

var host = "real-safari-park.cwazuxifehxl.us-west-2.rds.amazonaws.com";
var port = "5432";
var database = "real_safari_park";
var user = "quentin";
var pwd = "1209AzPoQsMlWxNb";

var client = null;
var callback = null;
exports.client = client;

var db_connect = function() {
    var conString = "postgres://" + user + ":" + pwd + "@" + host + ":" + port + "/" + database;
    client = new pg.Client(conString);

    client.connect(function(err) {
        if (err) {
            console.log("Connection to " + host + " : NOT OK");
            console.log("Error : " + err);

            return;
        }

        console.log("Connection to " + host + " : OK");
    });
}
exports.db_connect = db_connect;

var db_userAuth = function(fb_id, _callback) {
    if (client != null) {
        callback = _callback;

        function callback_getUser(data) {
            // S'il n'existe pas, on l'enregistre
            var user;
            if (data.length == 0) {
                user = {
                    fb_id: fb_id,
                    registered_at: 'NOW()',
                    logged: true,
                    last_logged_at: 'NOW()',
                };

                function callback_insertUser(res) {
                    var util = require('util');
                    console.log("Ajout d'utilisateur : " + res.rowCount);
                    if (callback != null) {
                        var todo = callback;
                        callback = null;
                        todo();
                    }
                }
                db_insertUser(user, callback_insertUser);
            }
            // Sinon, on met à jour ses infos
            {
                user = {
                    logged: true,
                    last_logged_at: 'NOW()',
                };

                function callback_updateUser(res) {
                    var util = require('util');
                    console.log("Update d'utilisateur : " + res.rowCount);
                    if (callback != null) {
                        var todo = callback;
                        callback = null;
                        todo();
                    }
                }
                db_updateUser(fb_id, user, callback_updateUser);
            }
        }
        // On commence par chercher s'il existe dans la bdd
        db_getUserFomFbId(fb_id, callback_getUser);
    }
}
exports.db_userAuth = db_userAuth;

var db_checkUserIsLogged = function(fb_id, _callback) {
    if (client != null) {
        callback = _callback;

        function callback_getUser(data) {
            var util = require("util");
            console.log(util.inspect(data, true, null));
            if(data.length > 0 && data[0].logged == true) {
                if (callback != null) {
                    var todo = callback;
                    callback = null;
                    todo(true);
                }
            }
            // Sinon, on met à jour ses infos
            {
                if (callback != null) {
                    var todo = callback;
                    callback = null;
                    todo(false);
                }
            }
        }
        // On commence par chercher s'il existe dans la bdd
        db_getUserFomFbId(fb_id, callback_getUser);
    }
};
exports.db_checkUserIsLogged = db_checkUserIsLogged;

var db_getUserFomFbId = function(fb_id, _callback) {
    if (client != null) {
        client.query("SELECT * FROM \"user\" WHERE fb_id = '" + fb_id + "'", function(err, result) {
            if (err) {
                return console.error('DB Manager (error) : ', err);
            }
            _callback(result.rows);
        });
    }
}
exports.db_getUserFomFbId = db_getUserFomFbId;

var db_insertUser = function(user, _callback) {
    if (client != null) {
        var fields = "";
        var values = "";
        for (var c in user) {
            fields += c + ",";
            values += user[c] + ",";
        }
        fields = fields.slice(0, - 1);
        values = values.slice(0, - 1);

        var query = "INSERT INTO \"user\" (" + fields + ") VALUES (" + values + ");";
        console.log("QUERY : " + query);
        client.query(query, function(err, result) {
            if (err) {
                return console.error('DB Manager (error) : ', err);
            }
            _callback(result);
        });
    }
}
exports.db_insertUser = db_insertUser;

var db_updateUser = function(fb_id, user, _callback) {
    if (client != null) {
        var values = "";
        for (var c in user) {
            values += c + "=" + user[c] + ",";
        }
        values = values.slice(0, - 1);

        var query = "UPDATE \"user\" SET " + values + " WHERE fb_id='" + fb_id + "';";
        console.log("QUERY : " + query);
        client.query(query, function(err, result) {
            if (err) {
                return console.error('DB Manager (error) : ', err);
            }
            _callback(result);
        });
    }
}
exports.db_updateUser = db_updateUser;

var db_checkPokemonInArea = function(fb_id, coords, callback)
{
    if(client != null)
    {
        var point1 = "ST_GeomFromText('POINT("+coords.lat+" "+coords.long+")', 4326)::geography";
        var point2 = "ST_GeomFromText('POINT(popped_place.x popped_place.y)', 4326)::geography";
        var test = "ST_DWithin("+point1+","+point2+", 65, false)";
        var query = "SELECT * FROM pokemon_popped as p WHERE "+test+"=true";
        //SELECT * FROM pokemon_popped WHERE ST_DWithin(ST_GeomFromText('POINT(45.7718104 4.870596699999965)', 4326)::geography,ST_GeomFromText('POINT(popped_place.x popped_place.y)', 4326)::geography, 65, false)==true
        //SELECT * FROM pokemon_popped WHERE ST_distance(ST_Transform(popped_place,27582),ST_Transform(ST_GeomFromEWKT('SRID=4326;POINT(45.7718104 4.870596699999965)'::geometry),27582)) < 65;
        console.log("Query : "+query);
    }
}
exports.db_checkPokemonInArea = db_checkPokemonInArea;